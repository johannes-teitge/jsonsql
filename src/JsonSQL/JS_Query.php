<?php
namespace Src\JsonSQL;

trait JS_Query
{

    
    /**
     * from
     * ====
     *
     * W√§hlt die Tabelle (JSON-Datei) aus, mit der die weitere Abfrage arbeiten soll.
     * Diese Methode muss vor dem Aufruf von `get()`, `where()`, `select()`, `insert()` usw. erfolgen.
     *
     * Parameter:
     * ----------
     * @param string $table   Der Name der Tabelle (Dateiname ohne ".json"-Endung)
     *
     * R√ºckgabe:
     * ---------
     * @return self           Gibt das Objekt zur√ºck, um Method-Chaining zu erm√∂glichen
     *
     * Verhalten:
     * ----------
     * - Die Methode pr√ºft, ob eine Datenbank ausgew√§hlt wurde (`$this->currentDbPath` muss gesetzt sein).
     *   Falls nicht, wird eine Exception geworfen.
     *
     * - Der Dateipfad zur Tabelle wird zusammengesetzt: `$this->currentDbPath . '/' . $table . '.json'`
     * - Falls die Datei noch nicht existiert, wird sie automatisch mit leerem Array (`[]`) angelegt.
     *
     * - Anschlie√üend wird die Tabelle geladen (via `$this->loadTableData()`),
     *   sodass die Daten im Arbeitsspeicher verf√ºgbar sind.
     *
     * Intern:
     * -------
     * - `$this->currentTableName` speichert den Tabellennamen
     * - `$this->currentTableFile` enth√§lt den vollst√§ndigen Dateipfad
     * - `$this->tableData` wird durch `loadTableData()` mit den Inhalten der Datei gef√ºllt
     *
     * Beispiel:
     * ---------
     * $db->from('produkte');  // verwendet die Datei "produkte.json" in der aktuellen Datenbank
     *
     * Hinweis:
     * --------
     * - Diese Methode ist Voraussetzung f√ºr alle Operationen mit Tabellendaten.
     * - Beim Datenbankwechsel (`useDatabase()`) muss `from()` erneut aufgerufen werden.
     */

    public function from(string $table): self {
        if (!$this->currentDbPath) {
            throw new \Exception("Keine Datenbank ausgew√§hlt.");
        }

        $this->currentTableName = $table; // üëà aktuelle Tabelle merken
        $file = $this->currentDbPath . DIRECTORY_SEPARATOR . $table . '.json';
        if (!file_exists($file)) {
            file_put_contents($file, json_encode([], JSON_PRETTY_PRINT));
        }

        $this->currentTableFile = $file;
        $this->loadTableData();
        return $this;
    }


    /**
     * select
     * ======
     *
     * Definiert die Spalten (Felder), die aus den Datens√§tzen selektiert werden sollen.
     * Unterst√ºtzt dabei optional auch Aliasnamen zur Umbenennung einzelner Felder.
     *
     * Der Aufruf dieser Methode ist optional. Wenn sie nicht verwendet wird,
     * oder mit `'*'` aufgerufen wird, werden alle Felder unver√§ndert zur√ºckgegeben.
     *
     * Parameter:
     * ----------
     * @param string|array $args  Liste der gew√ºnschten Felder, entweder:
     *                            - als String (z.‚ÄØB. "name, preis AS cost")
     *                            - oder als Array (z.‚ÄØB. ["name", "preis AS cost"])
     *                            Standard: '*' (alle Felder)
     *
     * R√ºckgabe:
     * ---------
     * @return self    Erm√∂glicht Method-Chaining (Fluent Interface)
     *
     * Verhalten:
     * ----------
     * - Ein mehrfacher Aufruf von `select()` innerhalb derselben Abfrage ist nicht erlaubt.
     *   Ein zweiter Aufruf l√∂st eine Exception aus.
     * - Felder mit "AS"-Alias (case-insensitive) werden korrekt erkannt:
     *     "preis AS cost" wird zu `['field' => 'preis', 'alias' => 'cost']`
     * - Falls kein Alias angegeben ist, wird das Feld unver√§ndert als `alias` verwendet.
     *
     * Interne Speicherung:
     * --------------------
     * - `$this->select`:     Enth√§lt alle Feld-Alias-Paare f√ºr die sp√§tere Auswahl.
     * - `$this->aliasMap`:   Optional verwendbare Zuordnung von alias => original f√ºr sp√§tere Referenzen.
     *
     * Beispiel:
     * ---------
     * $db->select('product, price AS kosten')->get();
     *
     * Ergebnis:
     * [
     *   ['product' => 'Toaster', 'kosten' => 29.99],
     *   ...
     * ]
     *
     * Hinweis:
     * --------
     * Diese Auswahl wirkt sich auf die Ausgabe von `get()` aus.
     * Felder, die nicht in `select()` angegeben sind, werden nicht zur√ºckgegeben.
     */
    public function select($args = '*'): self {

        // Mehrfaches select erlaubt, letzte Auswahl gewinnt:
        $this->selectCalled = true;        
        $this->aliasMap = [];
        $this->select = [];
        $this->filters = []; // Bug fixed 14.04.2025
    
        if ($args === '*') {
            $this->select[] = ['field' => '*', 'alias' => '*'];
            return $this;
        }
    
        $fields = is_array($args) ? $args : explode(',', $args);
    
        foreach ($fields as $field) {
            $field = trim($field);
            $parts = preg_split('/\s+AS\s+/i', $field);
    
            if (count($parts) === 2) {
                $orig = trim($parts[0]);
                $alias = trim($parts[1]);
            } else {
                $orig = $alias = trim($parts[0]);
            }
    
            $this->select[] = ['field' => $orig, 'alias' => $alias];
            $this->aliasMap[$alias] = $orig;
        }
    
        return $this;
    }


    /**
     * applySelect
     * ===========
     *
     * Wendet die in der `select()`-Methode definierten Feld-Auswahlen und Aliasnamen
     * auf die √ºbergebenen Datens√§tze an. Dabei wird jedes Datensatz-Array so reduziert,
     * dass nur die angegebenen Felder (Spalten) mit optionalen Aliasnamen enthalten sind.
     *
     * Diese Methode wird intern von `get()` aufgerufen, nachdem Filter, Sortierung und Gruppierung
     * angewendet wurden.
     *
     * Parameter:
     * ----------
     * @param array $data   Ein Array von assoziativen Arrays (Datenzeilen), wie z.‚ÄØB. aus einer JSON-Tabelle geladen.
     *
     * R√ºckgabe:
     * ---------
     * @return array        Ein Array von Arrays, bei dem pro Datensatz nur die ausgew√§hlten Felder vorhanden sind.
     *
     * Verhalten:
     * ----------
     * - Falls keine Felder ausgew√§hlt wurden (`select()` nicht aufgerufen oder `['field' => '*']`), 
     *   wird das Original-Array ohne √Ñnderungen zur√ºckgegeben.
     * - Jedes Feld kann √ºber einen Alias umbenannt werden (`'alias' => 'neuerName'`).
     * - Nicht vorhandene Felder im Original-Datensatz werden mit `null` zur√ºckgegeben.
     *
     * Beispiel-Aufruf:
     * ----------------
     * $db->select([
     *     ['field' => 'product', 'alias' => 'Artikel'],
     *     ['field' => 'price', 'alias' => 'Preis']
     * ])->get();
     *
     * Beispiel-Ausgabe:
     * -----------------
     * [
     *   ['Artikel' => 'Wasserkocher', 'Preis' => 42.99],
     *   ['Artikel' => 'Toaster',      'Preis' => 29.90],
     * ]
     *
     * Hinweis:
     * --------
     * - Diese Methode wird typischerweise am Ende der Abfragekette aufgerufen.
     * - Unterst√ºtzt keine verschachtelten Felder oder Berechnungen ‚Äì nur direkte Zuordnung.
     */
    protected function applySelect(array $data): array {
        if (empty($this->select) || ($this->select[0]['field'] ?? '') === '*') return $data;
    
        return array_map(function ($row) {
            $selected = [];
    
            foreach ($this->select as $sel) {
                $field = $sel['field'];
                $alias = $sel['alias'];
    
                $selected[$alias] = $row[$field] ?? null;
            }
    
            return $selected;
        }, $data);
    }
        
    
    
    /**
     * limit
     * =====
     *
     * Setzt die maximale Anzahl an Ergebnissen (Limit) sowie den Startindex (Offset),
     * ab dem die Ergebnisse zur√ºckgegeben werden sollen.
     * Diese Werte werden sp√§ter von der Methode `applyLimit()` verwendet.
     *
     * Parameter:
     * ----------
     * @param int $limit   Die maximale Anzahl der zur√ºckzugebenden Eintr√§ge.
     *                     - Bei 0 wird keine Limitierung vorgenommen (alle Eintr√§ge werden zur√ºckgegeben).
     *
     * @param int $offset  (Optional) Der Startindex innerhalb der Ergebnismenge.
     *                     - Standardwert: 0 (Beginne mit dem ersten Datensatz)
     *                     - Werte > 0 √ºberspringen entsprechend viele Eintr√§ge
     *
     * R√ºckgabe:
     * ---------
     * @return self        Gibt die Instanz des aktuellen Objekts zur√ºck (Fluent Interface),
     *                     um Methoden wie `->limit()->get()` zu erm√∂glichen.
     *
     * Beispiel:
     * ---------
     * $db->select()->from('produkte')->limit(10, 20)->get();
     * ‚Üí gibt maximal 10 Ergebnisse ab dem 21. Datensatz zur√ºck (offset = 20)
     *
     * Typischer Anwendungsfall:
     * --------------------------
     * - Paginierung von Ergebnissen (z.‚ÄØB. Seite 2 mit je 10 Eintr√§gen ‚Üí limit(10, 10))
     *
     * Hinweis:
     * --------
     * - Die eigentliche Begrenzung wird erst in `applyLimit()` ausgef√ºhrt,
     *   die intern von `get()` aufgerufen wird.
     */
    public function limit(int $limit, int $offset = 0): self {
        $this->limit = $limit;
        $this->offset = $offset;
        return $this;
    }
    
    /**
     * applyLimit
     * ==========
     *
     * Wendet die Limitierung auf die √ºbergebene Datenmenge an.
     * Diese Methode schneidet das √ºbergebene Array gem√§√ü gesetztem Offset und Limit zu.
     *
     * Parameter:
     * ----------
     * @param array $data   Die vollst√§ndige Datenmenge (z.‚ÄØB. Ergebnis aus einer Selektion).
     *
     * R√ºckgabe:
     * ---------
     * @return array        Ein Array mit maximal `$this->limit` Eintr√§gen, beginnend ab `$this->offset`.
     *
     * Logik:
     * ------
     * - Wenn `limit === 0`, wird kein Slice vorgenommen und die originalen Daten zur√ºckgegeben.
     * - Ansonsten wird mit `array_slice()` ein Ausschnitt aus dem Array gebildet.
     *   Dabei bestimmt:
     *   - `$this->offset` den Startindex (Standard meist 0),
     *   - `$this->limit` die maximale Anzahl an Datens√§tzen.
     *
     * Beispiel:
     * ---------
     * $this->limit  = 10;
     * $this->offset = 20;
     * => gibt die Datens√§tze 20 bis 29 (insgesamt 10) zur√ºck
     *
     * Typisches Einsatzszenario:
     * ---------------------------
     * - Wird intern in der `get()`-Methode oder nach der Filterung/Sortierung/Gruppierung aufgerufen,
     *   um das finale Ergebnis f√ºr z.‚ÄØB. Pagination zu erzeugen.
     *
     * Hinweis:
     * --------
     * - Die Methode ver√§ndert die Originaldaten nicht, sondern gibt eine begrenzte Kopie zur√ºck.
     */
    protected function applyLimit(array $data): array {
        if ($this->limit === 0) return $data;
        return array_slice($data, $this->offset, $this->limit);
    }
    
 
    /**
     * F√ºgt Filterbedingungen f√ºr die Datenbankabfrage hinzu.
     *
     * Standardm√§√üig √ºberschreibt ein neuer Aufruf von `where()` alle bisherigen Bedingungen.
     * Wenn `$append = true` gesetzt ist, werden die neuen Bedingungen an bestehende angeh√§ngt.
     *
     * Beispiel (√úberschreibt Standardm√§√üig):
     *   $db->where([['vendor', '=', 'Aldi']])
     *      ->where([['product', '=', 'Toaster']], 'AND'); // Nur letzte Bedingung gilt
     *
     * Beispiel (Kombiniert Bedingungen):
     *   $db->where([['vendor', '=', 'Aldi']])
     *      ->where([['product', '=', 'Toaster']], 'AND', true); // Beide Bedingungen werden gepr√ºft (mit AND)
     *
     * @param array $columns Ein Array von Bedingungen: [['feld', 'operator', 'wert'], ‚Ä¶]
     * @param string $merge Logischer Operator zwischen Bedingungen: 'AND' oder 'OR'
     * @param bool $append Wenn true, werden die Bedingungen an bestehende Filter angeh√§ngt
     * @return self
     */

    /**
     * Filterabfragen mit where()
     * ============================
     * 
     * Die `where()`-Methode dient dazu, Daten zu filtern.
     * Sie akzeptiert eine Liste von Bedingungen (als Array) sowie optional
     * eine Verkn√ºpfungslogik ("AND" oder "OR", Standard: "OR").
     *
     * Die Bedingungen k√∂nnen in zwei Formaten √ºbergeben werden:
     *
     * 1. Standardbedingungen (3 Elemente):
     *    [Feld, Operator, Wert]
     *
     * 2. Negierte Bedingungen:
     *    ['not', [Feld, Operator, Wert]]
     *
     * 3. Mehrere Bedingungen:
     *    √úbergib mehrere solcher Arrays in einer Liste, z.‚ÄØB.:
     *    [
     *      ['vendor', '=', 'Aldi'],
     *      ['rating', '>', 3]
     *    ]
     *
     * ============================
     * Unterst√ºtzte Operatoren:
     * ----------------------------
     * - '=' oder '==': Gleichheit
     * - '!='         : Ungleichheit
     * - '>'          : Gr√∂√üer als
     * - '>='         : Gr√∂√üer oder gleich
     * - '<'          : Kleiner als
     * - '<='         : Kleiner oder gleich
     * 
     * - 'like'       : Textsuche (mit % als Platzhalter)
     *   - '%text%'   ‚Üí enth√§lt
     *   - 'text%'    ‚Üí beginnt mit
     *   - '%text'    ‚Üí endet mit
     *   - 'text'     ‚Üí muss exakt enthalten sein
     * 
     * - 'in'         : Wert ist in Liste
     * - 'not in'     : Wert ist nicht in Liste
     *   ‚Üí √úbergib als Array oder Komma-getrennten String
     * 
     * - 'not'        : Negiert eine Bedingung (s.u.)
     *
     * ============================
     * Verkn√ºpfung von Bedingungen:
     * ----------------------------
     * - Standardm√§√üig werden Bedingungen mit ODER verkn√ºpft:
     *     ->where([...])        // OR
     *
     * - F√ºr UND-Verkn√ºpfung:
     *     ->where([...], 'AND')
     *
     * Beispiel:
     * ---------
     * $db->where([
     *     ['vendor', '=', 'Aldi'],
     *     ['product', 'like', '%Wasser%']
     * ], 'AND');
     *
     * ============================
     * Negation (NOT):
     * ---------------
     * Um eine einzelne Bedingung zu negieren, nutze:
     *   ['not', [Feld, Operator, Wert]]
     *
     * Beispiel:
     * ---------
     * $db->where([
     *     ['not', ['rating', '=', 2]],
     *     ['vendor', '=', 'Lidl']
     * ], 'AND');
     *
     * Hinweis: Negation funktioniert bei allen Operatoren!
     *
     * ============================
     * Beispiele:
     * ----------
     * 1. Einfache Gleichheit:
     *    $db->where([['vendor', '=', 'Aldi']]);
     *
     * 2. Mehrere Bedingungen mit AND:
     *    $db->where([
     *        ['vendor', '=', 'Aldi'],
     *        ['rating', '>=', 4]
     *    ], 'AND');
     *
     * 3. NOT verwenden:
     *    $db->where([
     *        ['not', ['product', 'like', '%Toaster%']],
     *        ['vendor', '=', 'Aldi']
     *    ], 'AND');
     *
     * 4. IN / NOT IN:
     *    $db->where([
     *        ['vendor', 'in', ['Aldi', 'Lidl']],
     *        ['product', 'not in', 'Toaster, Wasserkocher']
     *    ], 'AND');
     *
     * ============================
     * Erweiterungen:
     * --------------
     * - Gruppenklammern / verschachtelte Bedingungen werden in Zukunft unterst√ºtzt
     * - Kombinierte Abfragen (mehrere where() mit append) durch erweitertes API m√∂glich
     *
     */


    public function where(array $columns, string $merge = 'AND', bool $append = false): self {
        if ($append) {
            $this->filters = array_merge($this->filters, $columns);
        } else {
            $this->filters = $columns;
        }
        $this->mergeCondition = $merge;
        return $this;
    }



public function where__(array $columns, string $merge = 'OR', bool $append = false): self {
    $this->filters = ['dsfdassadfds'];

    $this->filters = $columns;
    return $this;
}

    protected function evaluateCondition_($fieldValue, $operator, $value): bool {
        if ($fieldValue === null) return false;
    
        switch (strtolower($operator)) {
            case 'like':
                $valStr = strtolower((string) $value);
                $fieldStr = strtolower((string) $fieldValue);
    
                if (str_starts_with($valStr, '%') && str_ends_with($valStr, '%')) {
                    return str_contains($fieldStr, trim($valStr, '%'));
                } elseif (str_starts_with($valStr, '%')) {
                    return str_ends_with($fieldStr, ltrim($valStr, '%'));
                } elseif (str_ends_with($valStr, '%')) {
                    return str_starts_with($fieldStr, rtrim($valStr, '%'));
                } else {
                    return str_contains($fieldStr, $valStr);
                }
    
            case '=':
            case '==': return $fieldValue == $value;
            case '!=': return $fieldValue != $value;
            case '>': return $fieldValue > $value;
            case '>=': return $fieldValue >= $value;
            case '<': return $fieldValue < $value;
            case '<=': return $fieldValue <= $value;
    
            case 'in':
                if (!is_array($value)) $value = array_map('trim', explode(',', $value));
                return in_array($fieldValue, $value, true);
    
            case 'not in':
                if (!is_array($value)) $value = array_map('trim', explode(',', $value));
                return !in_array($fieldValue, $value, true);
    
            default: return false;
        }
    }
    

    /**
     * applyFilters
     * ============
     * 
     * Wendet alle gesetzten Filterbedingungen (`$this->filters`) auf die √ºbergebenen Daten an.
     * Die Bedingungen werden in der Methode `where()` gesetzt.
     *
     * Funktionsweise:
     * ---------------
     * - Durchl√§uft alle Datens√§tze und √ºberpr√ºft jede definierte Bedingung.
     * - F√ºr jeden Datensatz werden die Bedingungen gepr√ºft und entsprechend
     *   der Verkn√ºpfungslogik (`AND` oder `OR`) kombiniert.
     * - R√ºckgabe ist ein gefiltertes Array mit allen Datens√§tzen, die die Bedingungen erf√ºllen.
     *
     * Unterst√ºtzte Operatoren:
     * ------------------------
     * - '=' / '==': Gleichheit
     * - '!='      : Ungleichheit
     * - '>'       : Gr√∂√üer als
     * - '>='      : Gr√∂√üer oder gleich
     * - '<'       : Kleiner als
     * - '<='      : Kleiner oder gleich
     * - 'like'    : Textsuche (Platzhalter mit %)
     *               Beispiel: '%foo%' (enth√§lt), 'foo%' (beginnt mit), '%foo' (endet mit)
     * - 'in'      : Wert in Liste (Array oder Komma-getrennter String)
     * - 'not in'  : Wert NICHT in Liste
     * - 'not'     : Negiert eine Bedingung, z.‚ÄØB. ['not', ['rating', '=', 2]]
     *
     * Verkn√ºpfung von Bedingungen:
     * ----------------------------
     * - Standardm√§√üig OR-Verkn√ºpfung: Ein Treffer reicht
     * - Bei 'AND': Alle Bedingungen m√ºssen erf√ºllt sein
     * 
     * Beispielstruktur:
     * -----------------
     * $this->filters = [
     *     ['vendor', '=', 'Aldi'],
     *     ['rating', '>=', 3],
     *     ['not', ['product', 'like', '%Toaster%']]
     * ];
     * 
     * $this->mergeCondition = 'AND'; // oder 'OR'
     *
     * R√ºckgabe:
     * ---------
     * - Array mit allen Eintr√§gen, die die Bedingungen erf√ºllen
     *
     * Besonderheiten:
     * ---------------
     * - Wird `$this->filters` nicht gesetzt, wird das Original-Array zur√ºckgegeben.
     * - Nicht vorhandene Felder im Datensatz werden als `null` behandelt.
     *
     * @param array $data  Das Eingabearray (z.‚ÄØB. die komplette Tabelle)
     * @return array       Gefiltertes Array gem√§√ü den gesetzten Bedingungen
     */
    protected function applyFilters_(array $data): array {
        if (empty($this->filters)) return $data;
    
        return array_filter($data, function ($row) {
            $results = [];
    
            foreach ($this->filters as $condition) {
    
                // Pr√ºfe auf NOT-Bedingung
                if (is_array($condition) && strtolower($condition[0]) === 'not') {
                    $sub = $condition[1] ?? null;
                    if (!is_array($sub) || count($sub) !== 3) {
                        $results[] = false; // ung√ºltig
                        continue;
                    }
    
                    [$field, $operator, $value] = $sub;
                    $match = !$this->evaluateCondition($row[$field] ?? null, $operator, $value);
    
                } elseif (is_array($condition) && count($condition) === 3) {
                    [$field, $operator, $value] = $condition;
                    $match = $this->evaluateCondition($row[$field] ?? null, $operator, $value);
                } else {
                    $match = false;
                }
    
                $results[] = $match;
            }
    
            return $this->mergeCondition === 'AND'
                ? !in_array(false, $results, true)
                : in_array(true, $results, true);
        });
    }
    


    /**
     * evaluateCondition
     * =================
     * 
     * Diese Methode pr√ºft, ob eine einzelne Bedingung auf ein gegebenes Feld zutrifft.
     * Sie wird von `applyFilters()` verwendet, um die Filterlogik umzusetzen.
     *
     * Parameter:
     * ----------
     * @param mixed  $fieldValue  Der tats√§chliche Wert im Datensatz f√ºr das betreffende Feld.
     * @param string $operator    Der Vergleichsoperator (z.‚ÄØB. '=', 'like', 'in', etc.).
     * @param mixed  $value       Der Vergleichswert, gegen den gepr√ºft wird.
     *
     * Unterst√ºtzte Operatoren:
     * -------------------------
     * - '=' / '==':     Pr√ºft Gleichheit (lose)
     * - '!=':           Pr√ºft Ungleichheit
     * - '>':            Pr√ºft, ob Feldwert gr√∂√üer als Vergleichswert ist
     * - '>=':           Pr√ºft, ob Feldwert gr√∂√üer oder gleich Vergleichswert ist
     * - '<':            Pr√ºft, ob Feldwert kleiner als Vergleichswert ist
     * - '<=':           Pr√ºft, ob Feldwert kleiner oder gleich Vergleichswert ist
     * - 'like':         F√ºhrt eine unscharfe Textsuche durch
     *                   Platzhalter mit % erlaubt:
     *                   - '%foo%' ‚Üí enth√§lt "foo"
     *                   - 'foo%'  ‚Üí beginnt mit "foo"
     *                   - '%foo'  ‚Üí endet mit "foo"
     * - 'in':           Pr√ºft, ob der Feldwert in einer Liste von Werten enthalten ist
     *                   (Array oder Komma-getrennter String)
     * - 'not in':       Pr√ºft, ob der Feldwert NICHT in einer Liste enthalten ist
     * - 'not':          Negiert eine einzelne Bedingung. Muss als verschachtelter Ausdruck √ºbergeben werden,
     *                   z.‚ÄØB. ['not', ['vendor', '=', 'Aldi']]
     *
     * R√ºckgabe:
     * ---------
     * @return bool  Gibt `true` zur√ºck, wenn die Bedingung erf√ºllt ist, sonst `false`.
     *
     * Hinweise:
     * ---------
     * - Diese Methode behandelt sowohl einfache Werte als auch Strings.
     * - Bei 'like', 'in' und 'not in' werden Strings zu Arrays aufgeteilt, falls n√∂tig.
     * - Alle Vergleiche erfolgen mit einem defensiven Null-Check (null f√ºhrt zu false).
     */
    protected function applyFilters(array $data): array {
        if (empty($this->filters)) return $data;
    
        return array_filter($data, function ($row) {
            $results = [];
    
            foreach ($this->filters as $condition) {
                [$field, $operator, $value] = $condition;
    
                $fieldValue = $row[$field] ?? null;
                $match = false;
    
                if ($fieldValue !== null) {
                    switch (strtolower($operator)) {
                        case 'like':
                            $valStr = strtolower((string) $value);
                            $fieldStr = strtolower((string) $fieldValue);
    
                            if (str_starts_with($valStr, '%') && str_ends_with($valStr, '%')) {
                                $match = str_contains($fieldStr, trim($valStr, '%'));
                            } elseif (str_starts_with($valStr, '%')) {
                                $match = str_ends_with($fieldStr, ltrim($valStr, '%'));
                            } elseif (str_ends_with($valStr, '%')) {
                                $match = str_starts_with($fieldStr, rtrim($valStr, '%'));
                            } else {
                                $match = str_contains($fieldStr, $valStr);
                            }
                            break;
    
                        case '=':
                        case '==':
                            $match = $fieldValue == $value;
                            break;
                        case '!=':
                            $match = $fieldValue != $value;
                            break;
                        case '>':
                            $match = $fieldValue > $value;
                            break;
                        case '>=':
                            $match = $fieldValue >= $value;
                            break;
                        case '<':
                            $match = $fieldValue < $value;
                            break;
                        case '<=':
                            $match = $fieldValue <= $value;
                            break;
    
                        case 'in':
                            if (!is_array($value) && is_string($value)) {
                                $value = array_map('trim', explode(',', $value));
                            }
                            $match = in_array($fieldValue, $value, true);
                            break;
    
                        case 'not in':
                            if (!is_array($value) && is_string($value)) {
                                $value = array_map('trim', explode(',', $value));
                            }
                            $match = !in_array($fieldValue, $value, true);
                            break;
    
                        default:
                            $match = false;
                    }
                }
    
                $results[] = $match;
            }
    
            return $this->mergeCondition === 'AND'
                ? !in_array(false, $results, true)
                : in_array(true, $results, true);
        });
    }    
    
    /**
     * groupBy
     * =======
     * 
     * Definiert die Spalten, nach denen das Ergebnis gruppiert werden soll ‚Äì √§hnlich dem SQL-Statement `GROUP BY`.
     * Dies ist n√ºtzlich, wenn man Aggregatfunktionen wie `count()`, `sum()`, `avg()` etc. pro Gruppe anwenden m√∂chte.
     *
     * Parameter:
     * ----------
     * @param array $columns  Ein Array mit einem oder mehreren Spaltennamen, z.‚ÄØB. ['vendor'] oder ['vendor', 'product']
     *
     * Verwendung:
     * -----------
     * $db->select()
     *    ->from('produkte')
     *    ->groupBy(['vendor']);
     *
     * R√ºckgabe:
     * ---------
     * @return self  Gibt die aktuelle Instanz von JsonSQL zur√ºck, um Method Chaining zu erm√∂glichen (Fluent Interface).
     *
     * Hinweise:
     * ---------
     * - Die Gruppierung wirkt sich auf die Struktur des R√ºckgabewerts bei `get()` oder `aggregate()` aus.
     * - Wenn keine Aggregatfunktion genutzt wird, kann die Gruppierung auch einfach zum Sortieren oder Filtern verwendet werden.
     * - Die Spaltennamen sollten existierende Felder in den Datens√§tzen sein.
     */
    public function groupBy(array $columns): self {
        // Gruppierung nach mehreren Spalten
        $this->groupBy = $columns;
        return $this; // Wir geben hier das JsonSQL-Objekt zur√ºck, damit 'get' weiterhin funktioniert
    }

    public function applyGroupBy(array $data, array $groupByColumns = []): array {
        // Wenn keine spezifischen Gruppierungsspalten √ºbergeben werden, die Standard-Gruppierung verwenden
        $groupByColumns = !empty($groupByColumns) ? $groupByColumns : $this->groupBy;
        
        $groups = [];
        
        // Durch alle Zeilen iterieren und nach den gruppierten Spalten sammeln
        foreach ($data as $row) {
            // Kombinierte Gruppierungsschl√ºssel erstellen
            $keyParts = [];
            
            // Die Gruppierung nach den angegebenen Spalten durchf√ºhren
            foreach ($groupByColumns as $column) {
                // Den Wert f√ºr jede Gruppe erhalten (null falls nicht vorhanden)
                $keyParts[] = $row[$column] ?? null;
            }
            
            // Kombinierte Schl√ºssel f√ºr die Gruppierung erstellen (z. B. '1_2' f√ºr mehrere Spalten)
            $key = implode('_', $keyParts);
            
            // Wenn der Schl√ºssel nicht existiert, eine neue Gruppe erstellen
            if (!isset($groups[$key])) {
                $groups[$key] = [];
            }
            
            // Zeile zur entsprechenden Gruppe hinzuf√ºgen
            $groups[$key][] = $row;
        }
        
        // R√ºckgabe der gruppierten Daten
        return $groups;
    }
    
    

    
    /**
     * orderBy
     * =======
     *
     * Definiert eine Sortierreihenfolge f√ºr die Ergebnismenge.
     * Die Methode speichert intern, nach welcher Spalte sortiert werden soll und in welcher Richtung.
     *
     * Parameter:
     * ----------
     * @param string $column     Der Spaltenname, nach dem sortiert werden soll.
     *                           Beispiel: 'price', 'rating', 'date'
     *
     * @param string $direction  Sortierrichtung, entweder 'ASC' (aufsteigend) oder 'DESC' (absteigend).
     *                           Standard: 'ASC'
     *
     * R√ºckgabe:
     * ---------
     * @return self              Gibt das aktuelle JsonSQL-Objekt zur√ºck, um method chaining zu erm√∂glichen.
     *
     * Beispiel:
     * ---------
     * $db->select()->from('produkte')
     *    ->orderBy('price', 'DESC')
     *    ->get();
     *
     * Intern:
     * -------
     * - Die eigentliche Sortierung wird sp√§ter in der Methode `applyOrderBy()` vorgenommen.
     * - Diese Methode dient lediglich zur √úbergabe und Speicherung der Sortierinformation.
     *
     * Hinweise:
     * ---------
     * - Gro√ü-/Kleinschreibung der Spaltennamen muss mit den tats√§chlichen Daten √ºbereinstimmen.
     * - Falls die angegebene Spalte in einigen Datens√§tzen fehlt, wird `null` als Vergleichswert verwendet.
     * - Die Richtung wird nicht √ºberpr√ºft ‚Äì validiere ggf. extern auf g√ºltige Werte ('ASC', 'DESC').
     */
    public function orderBy(string $column, string $direction = 'ASC'): self {
        $this->orderBy = [$column, $direction];
        return $this;
    }


    /**
     * applyGroupBy
     * ============
     *
     * Gruppiert ein gegebenes Array von Datens√§tzen anhand eines oder mehrerer Spalten.
     * Diese Methode wird typischerweise intern nach `groupBy()` aufgerufen, um das tats√§chliche Gruppieren umzusetzen.
     *
     * Parameter:
     * ----------
     * @param array $data              Das zu gruppierende Daten-Array (z.‚ÄØB. Ergebnis aus einer JSON-Tabelle)
     * @param array $groupByColumns    Optional: Array mit Spaltennamen, nach denen gruppiert werden soll.
     *                                 Wenn leer, wird auf die vorher definierte `$this->groupBy` zur√ºckgegriffen.
     *
     * R√ºckgabe:
     * ---------
     * @return array  Ein assoziatives Array mit Gruppierungsschl√ºsseln als Keys und Arrays von Datens√§tzen als Werte.
     *                Beispiel:
     *                [
     *                    'Aldi' => [ ...Datens√§tze mit vendor=Aldi... ],
     *                    'Lidl' => [ ...Datens√§tze mit vendor=Lidl... ]
     *                ]
     *                Bei Mehrfach-Gruppierung (z.‚ÄØB. ['vendor', 'product']) wird der Key z.‚ÄØB. zu "Aldi_Wasserkocher".
     *
     * Funktionsweise:
     * ---------------
     * - Es wird f√ºr jede Zeile im $data-Array ein Gruppierungsschl√ºssel gebildet, bestehend aus den Werten der gew√§hlten Spalten.
     * - Dieser Schl√ºssel wird per `implode('_', [...])` als eindeutiger Gruppenname verwendet.
     * - Die zugeh√∂rigen Zeilen werden unter diesem Schl√ºssel im R√ºckgabe-Array gesammelt.
     *
     * Anwendung:
     * ----------
     * Wird z.‚ÄØB. verwendet in Kombination mit Aggregatfunktionen, um Statistiken pro Gruppe zu berechnen.
     *
     * Beispiel:
     * ---------
     * $db->select()->from('produkte')->groupBy(['vendor']);
     * $groups = $db->applyGroupBy($data);
     *
     * Hinweise:
     * ---------
     * - Falls ein Feld in einem Datensatz fehlt, wird `null` als Teil des Gruppierungsschl√ºssels verwendet.
     * - Der erzeugte Gruppenschl√ºssel ist ein einfacher String ‚Äì f√ºr komplexe Schl√ºssel (z.‚ÄØB. JSON/Hash) kann man das Verfahren anpassen.
     */    
    protected function applyOrderBy(array $data): array {
        if (empty($this->orderBy)) return $data;
    
        $column = $this->orderBy[0];
        $direction = strtoupper($this->orderBy[1]);
        $realColumn = $this->aliasMap[$column] ?? $column;
    
        usort($data, function ($a, $b) use ($realColumn, $direction) {
            $valA = $a[$realColumn] ?? null;
            $valB = $b[$realColumn] ?? null;
            return $direction === 'ASC'
                ? $valA <=> $valB
                : $valB <=> $valA;
        });
    
        return $data;
    }



}    
